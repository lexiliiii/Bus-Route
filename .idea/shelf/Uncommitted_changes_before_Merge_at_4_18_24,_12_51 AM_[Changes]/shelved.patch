Index: src/test/java/edu/virginia/sde/hw5/BusLineReaderTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/edu/virginia/sde/hw5/BusLineReaderTest.java b/src/test/java/edu/virginia/sde/hw5/BusLineReaderTest.java
new file mode 100644
--- /dev/null	(date 1713415719549)
+++ b/src/test/java/edu/virginia/sde/hw5/BusLineReaderTest.java	(date 1713415719549)
@@ -0,0 +1,55 @@
+package edu.virginia.sde.hw5;
+
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.BeforeEach;
+import static org.junit.jupiter.api.Assertions.*;
+import org.junit.jupiter.api.extension.ExtendWith;
+import org.mockito.Mock;
+import org.mockito.junit.jupiter.MockitoExtension;
+
+import java.net.MalformedURLException;
+import java.util.HashSet;
+import java.util.Set;
+import static org.mockito.Mockito.*;
+import org.json.JSONArray;
+import org.json.JSONObject;
+import org.json.JSONTokener;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.net.URL;
+import java.nio.charset.StandardCharsets;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.stream.Collectors;
+
+
+class BusLineReaderTest {
+
+    @Mock
+    private URL stops;
+
+    @Mock
+    private URL lines;
+
+    @Mock
+    private Configuration configuration;
+
+    private BusLineReader busLineReader;
+
+    @BeforeEach
+    void setUp() throws MalformedURLException {
+        stops = new URL("https://www.cs.virginia.edu/~pm8fc/busses/stops.json");
+        lines = new URL("https://www.cs.virginia.edu/~pm8fc/busses/lines.json");
+        when(configuration.getBusLinesURL()).thenReturn(lines);
+        when(configuration.getBusStopsURL()).thenReturn(stops);
+        busLineReader = new BusLineReader(configuration);
+    }
+
+    @Test
+    void getBusLines() {
+        List<BusLine> buslineList = busLineReader.getBusLines();
+        assertEquals(buslineList.size(),16);
+    }
+}
\ No newline at end of file
Index: src/test/java/edu/virginia/sde/hw5/StopReaderTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/edu/virginia/sde/hw5/StopReaderTest.java b/src/test/java/edu/virginia/sde/hw5/StopReaderTest.java
new file mode 100644
--- /dev/null	(date 1713415033895)
+++ b/src/test/java/edu/virginia/sde/hw5/StopReaderTest.java	(date 1713415033895)
@@ -0,0 +1,12 @@
+package edu.virginia.sde.hw5;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+class StopReaderTest {
+
+    @Test
+    void getStops() {
+    }
+}
\ No newline at end of file
Index: src/test/java/edu/virginia/sde/hw5/DatabaseDriverTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/edu/virginia/sde/hw5/DatabaseDriverTest.java b/src/test/java/edu/virginia/sde/hw5/DatabaseDriverTest.java
new file mode 100644
--- /dev/null	(date 1713415033889)
+++ b/src/test/java/edu/virginia/sde/hw5/DatabaseDriverTest.java	(date 1713415033889)
@@ -0,0 +1,76 @@
+package edu.virginia.sde.hw5;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+class DatabaseDriverTest {
+
+    @Test
+    void connect() {
+    }
+
+    @Test
+    void commit() {
+    }
+
+    @Test
+    void rollback() {
+    }
+
+    @Test
+    void disconnect() {
+    }
+
+    @Test
+    void createTables() {
+    }
+
+    @Test
+    void addStops() {
+    }
+
+    @Test
+    void getAllStops() {
+    }
+
+    @Test
+    void getStopById() {
+    }
+
+    @Test
+    void getStopsByName() {
+    }
+
+    @Test
+    void addBusLines() {
+    }
+
+    @Test
+    void getBusLines() {
+    }
+
+    @Test
+    void getBusLinesById() {
+    }
+
+    @Test
+    void getBusLineByLongName() {
+    }
+
+    @Test
+    void getBusLineByShortName() {
+    }
+
+    @Test
+    void getBusLinesByStop() {
+    }
+
+    @Test
+    void getRouteForBusLine() {
+    }
+
+    @Test
+    void clearTables() {
+    }
+}
\ No newline at end of file
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>[![Review Assignment Due Date](https://classroom.github.com/assets/deadline-readme-button-24ddc0f5d75046c5622901739e7c5dd533143b0c8e959d652212380cedb1ea36.svg)](https://classroom.github.com/a/syjMWJ6t)\n# Homework 5 - Data Layer\n\n## Authors\n1) Name, netid, [GitHub profile name]\n2) Name, netid, [GitHub profile name]\n3) Name, netid, [GitHub profile name]\n\n\n## Contributions\n\nList the primary contributions of each author. It is recommended to update this with your contributions after each coding session.:\n\n### [Author 1 - replace this with their name]\n\n* Author 1 contributions\n* as a bulleted list\n* each line starts with an asterisk and a space\n\n### [Author 2 - replace this with their name]\n\n* Author 2 contributions\n* as a bulleted list\n* each line starts with an asterisk and a space\n\n### [Author 3 - replace this with their name]\n\n* Author 3 contributions\n* as a bulleted list\n* each line starts with an asterisk and a space\n\n## Issues\n\nList any known issues (bugs, incorrect behavior, etc.) at the time of submission.\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision 9bd737cd36d9106d2db783b8a9115fa422ae92af)
+++ b/README.md	(date 1713415097834)
@@ -2,33 +2,33 @@
 # Homework 5 - Data Layer
 
 ## Authors
-1) Name, netid, [GitHub profile name]
-2) Name, netid, [GitHub profile name]
-3) Name, netid, [GitHub profile name]
+1) Enhui Li, cmk8wq, [lexiliiii]
+2) Casey Shi, nqs9yv, [CaseyyyyS]
+3) Ziqian Zhao, uja2mg, [Sherryzhao23]
 
 
 ## Contributions
 
 List the primary contributions of each author. It is recommended to update this with your contributions after each coding session.:
 
-### [Author 1 - replace this with their name]
+### [Enhui Li]
 
-* Author 1 contributions
-* as a bulleted list
-* each line starts with an asterisk and a space
+* Implemented PART_3 and PART_4
+* Implemented PART_1 and PART_2 and PART_5
+* Wrote corresponding testings for PART_2 and PART_3
 
-### [Author 2 - replace this with their name]
+### [Casey Shi]
 
-* Author 2 contributions
-* as a bulleted list
-* each line starts with an asterisk and a space
-
-### [Author 3 - replace this with their name]
+* Implemented PART_1
+* Implemented PART_5
+* Wrote corresponding testings for PART_5
+  
+### [Ziqian Zhao]
 
-* Author 3 contributions
-* as a bulleted list
-* each line starts with an asterisk and a space
+* Implemented PART_2
+* Helped check PART_4
+* Wrote corresponding testings for PART_5
 
 ## Issues
 
-List any known issues (bugs, incorrect behavior, etc.) at the time of submission.
+No issues are being found when submitted.
Index: src/test/java/edu/virginia/sde/hw5/BusLineServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/edu/virginia/sde/hw5/BusLineServiceTest.java b/src/test/java/edu/virginia/sde/hw5/BusLineServiceTest.java
new file mode 100644
--- /dev/null	(date 1713415033891)
+++ b/src/test/java/edu/virginia/sde/hw5/BusLineServiceTest.java	(date 1713415033891)
@@ -0,0 +1,18 @@
+package edu.virginia.sde.hw5;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+class BusLineServiceTest {
+
+
+    @Test
+    void getClosestStop() {
+
+    }
+
+    @Test
+    void getRecommendedBusLine() {
+    }
+}
\ No newline at end of file
