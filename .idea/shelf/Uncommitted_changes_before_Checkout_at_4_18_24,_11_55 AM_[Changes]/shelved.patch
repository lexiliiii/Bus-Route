Index: src/main/java/edu/virginia/sde/hw5/BusLineReader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.virginia.sde.hw5;\n\nimport org.json.JSONArray;\nimport org.json.JSONObject;\nimport org.json.JSONTokener;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.URL;\nimport java.nio.charset.StandardCharsets;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class BusLineReader {\n    private final URL busLinesApiUrl;\n    private final URL busStopsApiUrl;\n\n    /* You'll need this to get the Stop objects when building the Routes object */\n    private final StopReader stopReader;\n    /**\n     * Returns a list of BusLine objects. This is a \"deep\" list, meaning all the BusLine objects\n     * already have their Route objects fully populated with that line's Stops.\n     */\n\n    public BusLineReader(Configuration configuration) {\n        this.busStopsApiUrl = configuration.getBusStopsURL();\n        this.busLinesApiUrl = configuration.getBusLinesURL();\n        stopReader = new StopReader(configuration);\n    }\n\n    /**\n     * This method returns the BusLines from the API service, including their\n     * complete Routes.\n     */\n    public List<BusLine> getBusLines() {//TODO: implement\n        List<BusLine> collection = new ArrayList<>();\n        List<Stop> allStops = stopReader.getStops();\n\n        try(var inputStream = busLinesApiUrl.openStream();\n            var inputStreamReader = new InputStreamReader(inputStream, StandardCharsets.UTF_8);\n            var bufferedReader = new BufferedReader(inputStreamReader)) {\n            try(var inputStream1 = busStopsApiUrl.openStream();\n                var inputStreamReader1 = new InputStreamReader(inputStream1, StandardCharsets.UTF_8);\n                var bufferedReader1 = new BufferedReader(inputStreamReader1)) {\n\n                    var fileContents = bufferedReader.lines().collect(Collectors.joining(\"\\n\"));\n                    var fileContents1 = bufferedReader1.lines().collect(Collectors.joining(\"\\n\"));\n\n                    JSONObject json = new JSONObject(new JSONTokener(fileContents));\n                    JSONArray buslines = json.getJSONArray(\"lines\");\n                    JSONObject json_route = new JSONObject(new JSONTokener(fileContents1));\n                    JSONArray routes = json_route.getJSONArray(\"routes\");\n\n                    for (int i = 0; i < buslines.length(); i++) {\n                        JSONObject eachStop = buslines.getJSONObject(i);\n                        int id_buslines = eachStop.getInt(\"id\");\n                        boolean isActive = eachStop.getBoolean(\"is_active\");\n                        String longName = eachStop.getString(\"long_name\");\n                        String shortName = eachStop.getString(\"short_name\");\n\n                        for(int a = 0; a < routes.length(); a ++){\n                            JSONObject eachRoute = routes.getJSONObject(a);\n                            JSONArray stopList = eachRoute.getJSONArray(\"stops\");\n                            int id_route = eachRoute.getInt(\"id\");\n//                        System.out.println(stopList);\n//                        System.out.println(allStops);\n\n                            if(id_route == id_buslines){\n                                Route tempRoute = new Route();\n\n                                for(int j = 0; j < stopList.length(); j ++){\n                                    int temp_id = stopList.getInt(j);\n                                    for(Stop s: allStops){\n                                        if(s.getId() == temp_id){\n                                            tempRoute.add(s);\n                                        }\n                                    }\n//                            allStops.contains(temp_id)\n//                            System.out.println(temp_id);\n                                }\n//                        System.out.println(tempRoute);\n\n                                collection.add(new BusLine(id_buslines, isActive, longName, shortName, tempRoute));\n                            }\n\n                        }\n                    }\n                }\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n        }\n        return collection;\n    }\n\n//    public static void main(String[] args){\n////        Configuration con = new Configuration();\n////        con.parseJsonConfigFile();\n//        try {\n//            Configuration con = new Configuration();\n//            StopReader stop = new StopReader(con);\n//            BusLineReader bus = new BusLineReader(con);\n//\n//            List<BusLine> xx = bus.getBusLines();\n//            System.out.println(xx);\n////            System.out.println(stop);\n////            List<Stop> temp = stop.getStops();\n////            System.out.println(temp.size());\n//        } catch (Exception e) {\n//            e.printStackTrace(); // This will print the stack trace if any exceptions are caught.\n//        }\n//    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/edu/virginia/sde/hw5/BusLineReader.java b/src/main/java/edu/virginia/sde/hw5/BusLineReader.java
--- a/src/main/java/edu/virginia/sde/hw5/BusLineReader.java	(revision 59430c4a3f84839974901e884ff1fc14ada9fc55)
+++ b/src/main/java/edu/virginia/sde/hw5/BusLineReader.java	(date 1713454511893)
@@ -84,7 +84,6 @@
 
                                 collection.add(new BusLine(id_buslines, isActive, longName, shortName, tempRoute));
                             }
-
                         }
                     }
                 }
Index: src/main/java/edu/virginia/sde/hw5/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package edu.virginia.sde.hw5;\nimport javax.print.DocFlavor;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\nimport java.sql.*;\nimport java.util.Arrays;\npublic class Main {\n    public static void main(String[] args){\n        Configuration con = new Configuration();\n        String databaseName = \"bus_stops.sqlite\";\n        DatabaseDriver driver = new DatabaseDriver(databaseName);\n\n        try {\n            driver.connect();\n\n            if(driver != null){\n                driver.clearTables();\n            }\n\n            driver.createTables();\n\n            BusLineReader busReader = new BusLineReader(con);\n            List<BusLine> busLines = busReader.getBusLines();\n\n            StopReader stopReader = new StopReader(con);\n            List<Stop> stops = stopReader.getStops();\n\n            driver.addStops(stops);\n            driver.addBusLines(busLines);\n\n//            List<Route> routes = new ArrayList<>();\n//            for(int i = 0; i < busLines.size(); i ++){\n//                routes.add(busLines.get(i).getRoute());\n//            }\n//\n//            System.out.println(\"Number of stops: \" + stops.size());\n//            for (Stop stop : stops) {\n//                System.out.println(\"Processing stop ID: \" + stop.getId());\n//            }\n//\n//            System.out.println(\"Number of bus lines: \" + busLines.size());\n//            for (BusLine busLine : busLines) {\n//                System.out.println(\"Processing bus line ID: \" + busLine.getId());\n//            }\n\n            driver.commit();\n\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.out.println(\"Error during database operations: \" + e.getMessage());\n            try {\n                driver.rollback();\n            } catch (SQLException re) {\n                System.out.println(\"Error during rollback: \" + re.getMessage());\n            }\n        } finally {\n            try {\n                driver.disconnect();\n            } catch (SQLException e) {\n                System.out.println(\"Error disconnecting from the database: \" + e.getMessage());\n            }\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/edu/virginia/sde/hw5/Main.java b/src/main/java/edu/virginia/sde/hw5/Main.java
--- a/src/main/java/edu/virginia/sde/hw5/Main.java	(revision 59430c4a3f84839974901e884ff1fc14ada9fc55)
+++ b/src/main/java/edu/virginia/sde/hw5/Main.java	(date 1713454511887)
@@ -29,6 +29,11 @@
             StopReader stopReader = new StopReader(con);
             List<Stop> stops = stopReader.getStops();
 
+            List<BusLine> bus = driver.getBusLines();
+            System.out.println(bus);
+//            List<Stop> stop = driver.getAllStops();
+//            System.out.println(stop);
+
             driver.addStops(stops);
             driver.addBusLines(busLines);
 
@@ -39,18 +44,25 @@
 //
 //            System.out.println("Number of stops: " + stops.size());
 //            for (Stop stop : stops) {
-//                System.out.println("Processing stop ID: " + stop.getId());
+//                System.out.println("Processing stop ID: " + stop);
 //            }
-//
-//            System.out.println("Number of bus lines: " + busLines.size());
-//            for (BusLine busLine : busLines) {
-//                System.out.println("Processing bus line ID: " + busLine.getId());
-//            }
+
+            System.out.println("Number of bus lines: " + busLines.size());
+            for (BusLine busLine : busLines) {
+//                System.out.println(busLine);
+//                System.out.println(busLine.getShortName());
+            }
+
+//            System.out.println("-----------------------");
+//            System.out.println("-----------------------");
+//            System.out.println("-----------------------");
+//            System.out.println("-----------------------");
+//            System.out.println(driver.getBusLineByLongName("Night Pilot"));
 
             driver.commit();
 
         } catch (Exception e) {
-            e.printStackTrace();
+//            e.printStackTrace();
             System.out.println("Error during database operations: " + e.getMessage());
             try {
                 driver.rollback();
Index: src/test/java/edu/virginia/sde/hw5/BusLineServiceTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/edu/virginia/sde/hw5/BusLineServiceTest.java b/src/test/java/edu/virginia/sde/hw5/BusLineServiceTest.java
new file mode 100644
--- /dev/null	(date 1713415868196)
+++ b/src/test/java/edu/virginia/sde/hw5/BusLineServiceTest.java	(date 1713415868196)
@@ -0,0 +1,18 @@
+package edu.virginia.sde.hw5;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+class BusLineServiceTest {
+
+
+    @Test
+    void getClosestStop() {
+
+    }
+
+    @Test
+    void getRecommendedBusLine() {
+    }
+}
\ No newline at end of file
Index: src/test/java/edu/virginia/sde/hw5/DatabaseDriverTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/edu/virginia/sde/hw5/DatabaseDriverTest.java b/src/test/java/edu/virginia/sde/hw5/DatabaseDriverTest.java
new file mode 100644
--- /dev/null	(date 1713416272638)
+++ b/src/test/java/edu/virginia/sde/hw5/DatabaseDriverTest.java	(date 1713416272638)
@@ -0,0 +1,95 @@
+package edu.virginia.sde.hw5;
+
+import org.junit.jupiter.api.Test;
+
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.sql.Connection;
+import java.sql.DriverManager;
+import java.sql.SQLException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Optional;
+import java.sql.*;
+import org.mockito.Mock;
+import org.junit.jupiter.api.BeforeEach;
+import static org.mockito.Mockito.*;
+
+
+import static org.junit.jupiter.api.Assertions.*;
+
+class DatabaseDriverTest {
+
+    @Mock
+    private URL stops;
+
+    @Mock
+    private URL lines;
+
+    @Mock
+    private Configuration configuration;
+
+    private BusLineReader busLineReader;
+
+    @BeforeEach
+    void setUp() throws MalformedURLException {
+        stops = new URL("https://www.cs.virginia.edu/~pm8fc/busses/stops.json");
+        lines = new URL("https://www.cs.virginia.edu/~pm8fc/busses/lines.json");
+        when(configuration.getBusLinesURL()).thenReturn(lines);
+        when(configuration.getBusStopsURL()).thenReturn(stops);
+        busLineReader = new BusLineReader(configuration);
+    }
+
+    @Test
+    void createTables() {
+
+    }
+
+    @Test
+    void addStops() {
+    }
+
+    @Test
+    void getAllStops() {
+    }
+
+    @Test
+    void getStopById() {
+    }
+
+    @Test
+    void getStopsByName() {
+    }
+
+    @Test
+    void addBusLines() {
+    }
+
+    @Test
+    void getBusLines() {
+    }
+
+    @Test
+    void getBusLinesById() {
+    }
+
+    @Test
+    void getBusLineByLongName() {
+    }
+
+    @Test
+    void getBusLineByShortName() {
+    }
+
+    @Test
+    void getBusLinesByStop() {
+    }
+
+    @Test
+    void getRouteForBusLine() {
+    }
+
+    @Test
+    void clearTables() {
+    }
+}
\ No newline at end of file
Index: src/test/java/edu/virginia/sde/hw5/StopReaderTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/edu/virginia/sde/hw5/StopReaderTest.java b/src/test/java/edu/virginia/sde/hw5/StopReaderTest.java
new file mode 100644
--- /dev/null	(date 1713415863397)
+++ b/src/test/java/edu/virginia/sde/hw5/StopReaderTest.java	(date 1713415863397)
@@ -0,0 +1,12 @@
+package edu.virginia.sde.hw5;
+
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+class StopReaderTest {
+
+    @Test
+    void getStops() {
+    }
+}
\ No newline at end of file
Index: src/test/java/edu/virginia/sde/hw5/BusLineReaderTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/edu/virginia/sde/hw5/BusLineReaderTest.java b/src/test/java/edu/virginia/sde/hw5/BusLineReaderTest.java
new file mode 100644
--- /dev/null	(date 1713416272622)
+++ b/src/test/java/edu/virginia/sde/hw5/BusLineReaderTest.java	(date 1713416272622)
@@ -0,0 +1,56 @@
+package edu.virginia.sde.hw5;
+
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.BeforeEach;
+import static org.junit.jupiter.api.Assertions.*;
+import org.junit.jupiter.api.extension.ExtendWith;
+import org.mockito.Mock;
+import org.mockito.junit.jupiter.MockitoExtension;
+
+import java.net.MalformedURLException;
+import java.util.HashSet;
+import java.util.Set;
+import static org.mockito.Mockito.*;
+import org.json.JSONArray;
+import org.json.JSONObject;
+import org.json.JSONTokener;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.net.URL;
+import java.nio.charset.StandardCharsets;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.stream.Collectors;
+
+
+class BusLineReaderTest {
+
+    @Mock
+    private URL stops;
+
+    @Mock
+    private URL lines;
+
+    @Mock
+    private Configuration configuration;
+
+    private BusLineReader busLineReader;
+
+    @BeforeEach
+    void setUp() throws MalformedURLException {
+        stops = new URL("https://www.cs.virginia.edu/~pm8fc/busses/stops.json");
+        lines = new URL("https://www.cs.virginia.edu/~pm8fc/busses/lines.json");
+        when(configuration.getBusLinesURL()).thenReturn(lines);
+        when(configuration.getBusStopsURL()).thenReturn(stops);
+        busLineReader = new BusLineReader(configuration);
+    }
+
+//    @Test
+//    void getBusLines() {
+//        List<BusLine> buslineList = busLineReader.getBusLines();
+//        int actualSize = buslineList.size();
+//        assertEquals(actualSize,16);
+//    }
+}
\ No newline at end of file
